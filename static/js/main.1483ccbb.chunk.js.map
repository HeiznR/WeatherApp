{"version":3,"sources":["utils/useTypedSelector.ts","components/Forecast/Today/Bar.tsx","components/Forecast/Bar.tsx","redux/Slice/Slice.ts","redux/ActionCreators/FetchData.ts","components/Search/Bar.tsx","components/Modal/Wrapper.tsx","components/Modal/Content.tsx","screens/MainPage.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["useTypedSelector","useSelector","TodayBar","data","state","weather","city","name","country","list","icon","description","className","src","alt","Math","round","main","temp","wind","speed","ForecastBar","dataWeatherSlice","createSlice","initialState","temp_max","temp_min","error","message","errorOccured","reducers","fetchDataSucces","action","payload","openPopUpWithDataError","closePopUp","actions","fetchData","createAsyncThunk","url","a","dispatch","axios","get","response","SearchBar","useState","setCity","useDispatch","value","onChange","e","target","onClick","Modal","children","createPortal","document","body","ModalContent","MainPage","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","App","rootReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1483ccbb.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\nimport { rootState } from \"../redux/store\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<rootState> = useSelector","import { FC } from \"react\";\r\nimport { IForecast } from \"../../../types/typeResponse\";\r\nimport { useTypedSelector } from \"../../../utils/useTypedSelector\";\r\nimport \"./Bar.scss\";\r\n\r\nconst TodayBar: FC = () => {\r\n  const data: IForecast = useTypedSelector((state) => state.weather.data);\r\n  const { name, country } = data.city;\r\n  const { icon, description } = data.list[0].weather[0];\r\n  return (\r\n    <div className=\"todayForecast\">\r\n      <div className=\"todayForecast__name\">\r\n        {name},{country}\r\n      </div>\r\n      <img\r\n        className=\"todayForecast__image\"\r\n        src={icon && `http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n        alt=\"weather-icon\"\r\n      />\r\n      <div className=\"todayForecast__temp\">\r\n        {Math.round(data.list[0].main.temp - 273)}Â°C\r\n      </div>\r\n      <div className=\"todayForecast__description\">{description}</div>\r\n      <div className=\"todayForecast__wind\">\r\n        wind: <span>{data.list[0].wind.speed} m/s</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodayBar;\r\n","import { FC } from \"react\";\r\nimport TodayBar from \"./Today/Bar\";\r\n\r\nconst ForecastBar: FC = () => {\r\n  return (\r\n    <div className=\"forecastBar\">\r\n      <TodayBar />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastBar;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { IError } from \"../../types/typeError\";\r\nimport { IForecast } from \"../../types/typeResponse\";\r\n\r\ninterface IInitial {\r\n  data: IForecast;\r\n  error: IError;\r\n}\r\n\r\nconst initialState = {\r\n  data: {\r\n    city: { name: \"\", country: \"\" },\r\n    list: [\r\n      {\r\n        main: { temp: 0, temp_max: 0, temp_min: 0 },\r\n        weather: [{ description: \"\", icon: \"\" }],\r\n        wind: { speed: 0 },\r\n      },\r\n    ],\r\n  },\r\n  error: {\r\n    message: \"\",\r\n    errorOccured: false,\r\n  },\r\n} as IInitial;\r\n\r\nconst dataWeatherSlice = createSlice({\r\n  name: \"weatherReducer\",\r\n  initialState,\r\n  reducers: {\r\n    fetchDataSucces(state, action: PayloadAction<IForecast>) {\r\n      state.data = action.payload;\r\n    },\r\n    openPopUpWithDataError(state, action: PayloadAction<string>) {\r\n      state.error.message = action.payload;\r\n      state.error.errorOccured = true;\r\n    },\r\n    closePopUp(state) {\r\n      state.error.errorOccured = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport default dataWeatherSlice.reducer;\r\nexport const { fetchDataSucces, openPopUpWithDataError, closePopUp } =\r\n  dataWeatherSlice.actions;\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { IForecast } from \"../../types/typeResponse\";\r\nimport { fetchDataSucces, openPopUpWithDataError } from \"../Slice/Slice\";\r\n\r\nexport const fetchData = createAsyncThunk(\r\n  \"weatherReducer/fetchData\",\r\n  async function (url: string, { dispatch }) {\r\n    try {\r\n      const response = await axios.get<IForecast>(url);\r\n      dispatch(fetchDataSucces(response.data));\r\n      return;\r\n    } catch (error) {\r\n      dispatch(openPopUpWithDataError(\"city not found\"));\r\n      return;\r\n    }\r\n  }\r\n);\r\n\r\nexport default fetchData;\r\n","import { FC, useState } from \"react\";\r\nimport \"./Bar.scss\";\r\nimport fetchData from \"../../redux/ActionCreators/FetchData\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { openPopUpWithDataError } from \"../../redux/Slice/Slice\";\r\n\r\nconst SearchBar: FC = () => {\r\n  const [city, setCity] = useState<string>(\"\");\r\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n  const dispatch = useDispatch();\r\n  const url = `https://the-ultimate-api-challenge.herokuapp.com/api.openweathermap.org/data/2.5/forecast?q=${city}&appid=b66b3fe27f7bea0990712afd47f3ae83`;\r\n  return (\r\n    <div className=\"search\">\r\n      <input className=\"search__input\" value={city} onChange={handleChange} />\r\n      <button\r\n        className=\"search__button\"\r\n        onClick={() => {\r\n          city\r\n            ? dispatch(fetchData(url))\r\n            : dispatch(openPopUpWithDataError(\"Input field cannot be empty\"));\r\n        }}\r\n      >\r\n        Search\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import { FC } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport \"./Wrapper.scss\";\r\n\r\nconst Modal: FC = ({ children }) => {\r\n  return createPortal(<div className=\"Modal\">{children}</div>, document.body);\r\n};\r\n\r\nexport default Modal;\r\n","import { FC } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { closePopUp } from \"../../redux/Slice/Slice\";\r\nimport { useTypedSelector } from \"../../utils/useTypedSelector\";\r\nimport \"./Content.scss\";\r\n\r\nconst ModalContent: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const error = useTypedSelector((state) => state.weather.error);\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"content__message\">{error.message}</div>\r\n      <button\r\n        className=\"content__button\"\r\n        onClick={() => {\r\n          dispatch(closePopUp());\r\n        }}\r\n      >\r\n        OK\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalContent;\r\n","import { useEffect } from \"react\";\r\nimport ForecastBar from \"../components/Forecast/Bar\";\r\nimport SearchBar from \"../components/Search/Bar\";\r\nimport ModalWrapper from \"../components/Modal/Wrapper\";\r\nimport ModalContent from \"../components/Modal/Content\";\r\nimport fetchData from \"../redux/ActionCreators/FetchData\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTypedSelector } from \"../utils/useTypedSelector\";\r\nimport { openPopUpWithDataError } from \"../redux/Slice/Slice\";\r\n\r\nconst MainPage = () => {\r\n  let dispatch = useDispatch();\r\n  const error = useTypedSelector((state) => state.weather.error);\r\n\r\n  useEffect(() => {\r\n    const succesCallback = (position: any) => {\r\n      let url = `https://the-ultimate-api-challenge.herokuapp.com/api.openweathermap.org/data/2.5/forecast?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=b66b3fe27f7bea0990712afd47f3ae83`;\r\n      dispatch(fetchData(url));\r\n    };\r\n    const errorCallback = () => {\r\n      dispatch(openPopUpWithDataError(\"User denied geolocation\"));\r\n    };\r\n    navigator.geolocation.getCurrentPosition(succesCallback, errorCallback);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <SearchBar />\r\n      <ForecastBar />\r\n      {error.errorOccured && (\r\n        <ModalWrapper>\r\n          <ModalContent />\r\n        </ModalWrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport MainPage from \"./screens/MainPage\";\n\nfunction App() {\n  return (\n    <>\n      <MainPage />\n    </>\n  );\n}\n\nexport default App;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport thunk from \"redux-thunk\";\r\nimport dataWeatherSlice from \"./Slice/Slice\";\r\nconst rootReducer = combineReducers({\r\n  weather: dataWeatherSlice,\r\n});\r\nexport type rootState = ReturnType<typeof rootReducer>;\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk),\r\n});\r\n","import ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}